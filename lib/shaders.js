"use strict";
function pixelShader(edgeCount) {
    return "\n        precision mediump float;\n        uniform vec4 color;\n        const float DELTA = 0.2;\n        varying vec4 mycol;\n\n        void main() {\n            gl_FragColor = mycol; \n        }";
}
exports.pixelShader = pixelShader;
function vertexShader(edgeCount) {
    return "\n        precision mediump float;\n        attribute float time;\n        attribute float edgeIndex;  \n        uniform sampler2D edgeData;\n        uniform vec2 worldsize;\n        uniform float size;\n        uniform float second;\n        uniform float edgeCount;\n        varying vec4 mycol;\n        const float nodeVariation = 0.005; \n\n        float random(vec2 co)\n        {\n            return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n        }\n\n        void main() {\n            float timefrac = mod(second+time,1.0);\n            // vector coordinates in second row\n            vec4 pts = texture2D(edgeData,vec2(edgeIndex/edgeCount,1.5/4.0));\n            // vector variations (randomness) in third row (min,max,mid,seed)\n            vec4 variations = texture2D(edgeData,vec2(edgeIndex/edgeCount,2.5/4.0));\n            float seed = variations.w;\n            float rnd = random(vec2(time,0));\n            vec2 from = pts.xy + nodeVariation * rnd; \n            vec2 to = pts.zw + nodeVariation * rnd;\n            vec2 middle = vec2(rnd * variations.z + variations.x,rnd * variations.z + variations.x);\n\n            // position is linear between source and target\n            vec2 p1 = mix(from,to,timefrac);\n            // add some variation with a mixed in mid point 0t=0 0.25t=0.25(0.15) 0.5t=0.5(0.15) 1t=0\n            vec2 p = mix(p1,middle+(to+from)/2.0,clamp(0.5-abs(timefrac-0.5),0.0,0.15));\n            gl_Position = vec4(p * 2.0 - 1.0, 0.0, 1.0);\n            gl_PointSize = size;\n            mycol = texture2D(edgeData,vec2(edgeIndex/edgeCount,0.5/4.0));\n        }\n        ";
}
exports.vertexShader = vertexShader;
//# sourceMappingURL=shaders.js.map